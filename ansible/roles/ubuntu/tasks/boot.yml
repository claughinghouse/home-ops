---

# - name: boot | set cmdline options
#   lineinfile:
#     path: /boot/firmware/cmdline.txt
#     backrefs: yes
#     regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=0 mitigations=off max_loop=32\b).*)$'
#     line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory apparmor=0 mitigations=off max_loop=32'
#   when: ansible_architecture | regex_search('arm|aarch')

- name: boot | set apparmor=0
  become: true
  replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=(?:(?![" ]{{ option | regex_escape }}=).)*)(?:[" ]{{ option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ option }}={{ value }}\2'
  vars:
    option: apparmor
    value: 0
  # when: ansible_architecture == 'x86_64'

- name: boot | set mitigations=off
  become: true
  replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=(?:(?![" ]{{ option | regex_escape }}=).)*)(?:[" ]{{ option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ option }}={{ value }}\2'
  vars:
    option: mitigations
    value: "off"
  # when: ansible_architecture == 'x86_64'

- name: boot | set max_loop=32
  become: true
  replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=(?:(?![" ]{{ option | regex_escape }}=).)*)(?:[" ]{{ option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ option }}={{ value }}\2'
  vars:
    option: max_loop
    value: 32
  # when: ansible_architecture == 'x86_64'
