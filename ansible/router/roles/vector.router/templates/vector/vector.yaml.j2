---
#
# IPv4: TCP
# Regex: ^(?P<message>(?P<rule>[^,]*),(?P<sub_rule>[^,]*),(?P<anchor>[^,]*),(?P<tracker>[^,]*),(?P<interface>[^,]*),(?P<reason>[^,]*),(?P<action>[^,]*),(?P<direction>[^,]*),(?P<ip_version>[^,]*),(?P<tos>[^,]*),(?P<ecn>[^,]*),(?P<ttl>[^,]*),(?P<id>[^,]*),(?P<offset>[^,]*),(?P<flags>[^,]*),(?P<protocol_id>[^,]*),(?P<protocol>tcp),(?P<length>[^,]*),(?P<source_ip>[^,]*),(?P<destination_ip>[^,]*),(?P<source_port>[^,]*),(?P<destination_port>[^,]*),(?P<data_length>[^,]*),(?P<tcp_flags>[^,]*),(?P<sequence_number>[^,]*),(?P<ack_number>[^,]*),(?P<tcp_window>[^,]*),(?P<urg>[^,]*),(?P<tcp_options>[^,]*))$
# Example: 94,,,ef794793b2e3764b938bd04cba88e8a3,igb0,match,pass,out,4,0x0,,62,16800,0,DF,6,tcp,60,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx,11715,443,0,S,3876953207,,64240,,mss;sackOK;TS;nop;wscale
#
# IPv6: TCP
# Regex: ?
# Example: ?
#
# IPv4 / IPv6: UDP
# Regex: ^(?P<message>(?P<rule>[^,]*),(?P<sub_rule>[^,]*),(?P<anchor>[^,]*),(?P<tracker>[^,]*),(?P<interface>[^,]*),(?P<reason>[^,]*),(?P<action>[^,]*),(?P<direction>[^,]*),(?P<ip_version>[^,]*),(?P<tos>[^,]*),(?P<ecn>[^,]*),(?P<ttl>[^,]*),(?P<id>[^,]*),(?P<offset>[^,]*),(?P<flags>[^,]*),(?P<protocol_id>[^,]*),(?P<protocol>udp),(?P<length>[^,]*),(?P<source_ip>[^,]*),(?P<destination_ip>[^,]*),(?P<source_port>[^,]*),(?P<destination_port>[^,]*),(?P<data_length>[^,]*))$
# Example: 90,,,91e2443ae2e8caf012f9a6e5a8a455c8,lo0,match,pass,in,4,0x4,,255,4660,0,none,17,udp,914,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx,5353,5353,894
# Example: 15,,,91515c100a3692cb94121964974ce513,igb1_vlan150,match,block,in,6,0x00,0x00000,255,udp,17,391,xxxx::xxxx:xxxx:xxxx:xxxx,xxxx::xx,5353,5353,391
#
# IPv4: ICMP / IGMP / GRE
# Regex: ^(?P<message>(?P<rule>[^,]*),(?P<sub_rule>[^,]*),(?P<anchor>[^,]*),(?P<tracker>[^,]*),(?P<interface>[^,]*),(?P<reason>[^,]*),(?P<action>[^,]*),(?P<direction>[^,]*),(?P<ip_version>[^,]*),(?P<tos>[^,]*),(?P<ecn>[^,]*),(?P<ttl>[^,]*),(?P<id>[^,]*),(?P<offset>[^,]*),(?P<flags>[^,]*),(?P<protocol_id>[^,]*),(?P<protocol>icmp|igmp|gre),(?P<length>[^,]*),(?P<source_ip>[^,]*),(?P<destination_ip>[^,]*),(?P<data>[^,]*))$
# Example: 94,,,ef794793b2e3764b938bd04cba88e8a3,igb0,match,pass,out,4,0x0,,63,44871,0,DF,1,icmp,84,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx,datalength=64
# Example: 16,,,02f4bab031b57d1e30553ce08e0ec131,igb1_vlan150,match,block,in,4,0xc0,,1,15472,0,none,2,igmp,32,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx,datalength=8
# Example: 16,,,02f4bab031b57d1e30553ce08e0ec131,igb0,match,block,in,4,0x0,,57,20354,0,DF,47,gre,564,xxx.xxx.xxx.xxx,xxx.xxx.xxx.xxx,datalength=544
#
data_dir: /tmp
sources:
  filterlog_logs:
    type: file
    include:
      - /var/log/filter/latest.log
transforms:
  filterlog_remap:
    type: remap
    inputs:
      - filterlog_logs
    source: |
      . |= parse_syslog!(.message)
      if .appname == "filterlog" {
        log_data = parse_csv!(.message)
        # IPv4 / IPv6
        if log_data[8] == "4" || log_data[8] == "6" {
          .filter_interface = log_data[4]
          .filter_direction = log_data[7]
          .filter_action = log_data[6]
          .filter_ip_version = log_data[8]
          .filter_protocol = log_data[16]
          .filter_source_ip = log_data[18]
          .filter_destination_ip = log_data[19]
          # ICMP & IGMP & GRE
          if (log_data[16] == "icmp" || log_data[16] == "igmp" || log_data[16] == "gre") {
            .filter_data = log_data[20]
          } else {
            .filter_source_port = log_data[20]
            .filter_destination_port = log_data[21]
            .filter_data_length = log_data[22]
            # TCP Flags
            if log_data[8] == "4" && log_data[16] == "tcp" {
              .filter_tcp_flags = log_data[23]
            }
          }
        }
      }
  filterlog_direction_route:
    type: route
    inputs:
      - filterlog_remap
    route:
      pass_action: >-
        .filter_action == "pass"
      other_action: >-
        .filter_action != "pass"
  filterlog_geoip:
    type: geoip
    inputs:
      - filterlog_direction_route.pass_action
    database: /usr/local/etc/geoip/GeoLite2-City.mmdb
    source: filter_source_ip
    target: geoip
sinks:
  vector_sink:
    type: vector
    inputs:
      - filterlog_direction_route.other_action
      - filterlog_geoip
    address: "{{ vector_aggregator_addr }}:{{ vector_aggregator_port }}"
    version: "2"
